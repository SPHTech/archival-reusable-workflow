name: 'Deploy AWS Lambda Layer'

on:
  workflow_call:
    inputs:
      aws_account_region:
        description: "AWS account region"
        type: string
        required: true
      aws_iam_role_arn:
        description: "AWS ARN IAM Role"
        type: string
        required: true
      layer_name:
        description: "Lambda layer function name"
        type: string
        required: true
      layer_description:
        description: "Lambda function layer description"
        type: string
        required: true
      license_info:
        description: "Lambda layer zip file"
        type: string
        required: false
        default: 'GPLv3'
      code_runtime:
        description: "Code Runtime for the Layer"
        type: string
        required: true
      runtime_version:
        description: "code Runtime version"
        type: string
        required: true
      working_directory:
        description: "Working Directory of the project"
        type: string
        required: false
        default: './'
      build_script_path:
        description: "Adding a build script path"
        type: string
        required: false
      local_build_path:
        description: " Add the local build path"
        type: string
        required: false
      s3_bucket:
        description: "AWS S3 bucket where the lambda zip file is stored"
        type: string
        required: false
      s3_key:
        description: "AWS S3 key for the lambda zip"
        type: string
        required: false
      compatible_runtimes:
        description: "Provide the compatible runtimes for the layers (space-separated if we need to define multiple runtimes)"
        type: string
        required: true
      compatible_architecture:
        description: "Provide the compatible architecture for the layers"
        type: string
        required: false
        default: 'x86_64'

jobs:
  deploy-lambda:
    name: Deploy Lambda Layers
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-skip-session-tagging: true
        role-to-assume: ${{ inputs.aws_iam_role_arn }}
        role-session-name: gh-actions
        aws-region: ${{ inputs.aws_account_region }}

    - uses: actions/setup-python@v4
      name: Install Python and pip
      with:
        python-version: ${{ inputs.runtime_version }}
        cache: 'pip'
      if: ${{ inputs.code_runtime == 'python' }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      if: ${{ inputs.code_runtime == 'python' }}

    - name: Install Nodejs
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.runtime_version }}
        cache: 'npm'
        cache-dependency-path: ${{ format('{0}/{1}', inputs.working_directory ,'package-lock.json') }}
      if: ${{ inputs.code_runtime == 'nodejs' }}

    - name: Build the Lambda Layer
      working-directory: ${{ inputs.working_directory }}
      run: |
        bash ${GITHUB_WORKSPACE}/${{  inputs.build_script_path }}
      if: ${{ inputs.build_script_path !='' }}

    - name: Deploy to Lambda Layer via Zip
      working-directory:  ${{ inputs.working_directory }}
      run: |
        aws lambda publish-layer-version \
        --layer-name ${{ inputs.layer_name }} \
        --description "${{ inputs.layer_description }}" \
        --license-info ${{ inputs.license_info }} \
        --zip-file fileb://${{ inputs.local_build_path }} \
        --compatible-runtimes ${{ inputs.compatible_runtimes }} \
        --compatible-architectures ${{ inputs.compatible_architecture }}
      if: ${{ inputs.local_build_path !='' }}

    - name: Deploy to Lambda Layer via S3
      working-directory: ${{ inputs.working_directory }}
      run: |
        aws lambda publish-layer-version \
        --layer-name ${{ inputs.layer_name }} \
        --description "${{ inputs.layer_description }}" \
        --license-info ${{ inputs.license_info }} \
        --content S3Bucket=${{ inputs.s3_bucket }},S3Key=${{ inputs.s3_key }} \
        --compatible-runtimes ${{ inputs.compatible_runtimes }} \
        --compatible-architectures ${{ inputs.compatible_architecture }}
      if: ${{ (inputs.s3_bucket !='') && (inputs.s3_key !='')  }}
