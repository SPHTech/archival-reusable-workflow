name: 'Deploy AWS Lambda Using Zip'

on:
  workflow_call:
    inputs:
      lambda_function_name:
        description: "Lambda name to be deployed"
        type: string
        required: true
      aws_account_region:
        description: "AWS account region"
        type: string
        required: true
      aws_iam_role_arn:
        description: "AWS ARN IAM Role"
        type: string
        required: true
      working_directory:
        description: "Working Directory of the project"
        type: string
        required: false
        default: './'
      build_script_path:
        description: "Adding a build script path"
        type: string
        required: true
      local_build_path:
        description: " Add the local build path"
        type: string
        required: true
      lambda_environment_var:
        description: "AWS Lambda comma Separate list of environment variable"
        type: string
        required: false

jobs:
  deploy-lambda:
    name:  Deploy to Lambda
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-skip-session-tagging: true
        role-to-assume: ${{ inputs.aws_iam_role_arn }}
        role-session-name: gh-actions
        aws-region: ${{ inputs.aws_account_region }}

    - name: Build the Lambda
      working-directory: ${{ inputs.working_directory }}
      run: |
        bash ${GITHUB_WORKSPACE}/${{  inputs.build_script_path }}

    - name: Deploy to Lamnda
      working-directory: ${{ inputs.working_directory }}
      run: |
        aws lambda update-function-code --function-name ${{inputs.lambda_function_name}} --zip-file fileb://${{ inputs.local_build_path }}

    - name: Extract version from package.json
      id: jqdata
      run: |
        LAMBDA_ENV_INPUT_VAR='${{ inputs.lambda_environment_var }}' | sed 's/"/\\"/g'
        echo $LAMBDA_ENV_INPUT_VAR
        env_var=$(jq --compact-output ".Environment + {\"Variables\": (.Environment.Variables + {$LAMBDA_ENV_INPUT_VAR})}")
        echo "env_var=$env_var" >> $GITHUB_ENV
        echo $env_var
      if: ${{ inputs.lambda_environment_var !='' }}

    - name: Update Lambda Environment Variables
      working-directory: ${{ inputs.working_directory }}
      env:
        env_var: ${{ env.env_var }}
      run: |
        UPDATED_ENVIRONMNET_VARIABLES=$(aws lambda get-function-configuration --function-name archival-batch-classified-merge-ads-dev | ${{ env.env_var }})
        aws lambda update-function-configuration --function-name ${{ inputs.lambda_function_name }} \
        --environment ${UPDATED_ENVIRONMNET_VARIABLES} "Variables={${{ inputs.lambda_environment_var }}}"
      if: ${{ inputs.lambda_environment_var !='' }}
