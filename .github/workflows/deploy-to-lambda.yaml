name: 'Deploy AWS Lambda Using Zip'

on:
  workflow_call:
    inputs:
      lambda_function_name:
        description: "Lambda name to be deployed"
        type: string
        required: true
      aws_account_region:
        description: "AWS account region"
        type: string
        required: true
      aws_iam_role_arn:
        description: "AWS ARN IAM Role"
        type: string
        required: true
      working_directory:
        description: "Working Directory of the project"
        type: string
        required: false
        default: './'
      build_script_path:
        description: "Adding a build script path"
        type: string
        required: false
      local_build_path:
        description: " Add the local build path"
        type: string
        required: false
      lambda_environment_var:
        description: "AWS Lambda comma Separate list of environment variable"
        type: string
        required: false
      s3_bucket:
        description: "AWS S3 bucket where the lambda zip file is stored"
        type: string
        required: false
      s3_key:
        description: "AWS S3 key for the lambda zip"
        type: string
        required: false
      ecr_image_uri:
        description: "ECR Image URI to deploy to lambda"
        type: string
        required: false
      lambda_architecture:
        description: "AWS Lambda architecture"
        default: 'x86_64'
        type: string
        required: false
      runner_label:
        description: "Add runners for the GHA"
        default: '["platform-eng-ent-v2-dual"]'
        type: string
        required: false
      dx_service_name:
        description: "Name of the service to register deployment to DX"
        required: false
        type: string
      dx_product_name:
        description: "Name of the product to register deployment to DX"
        required: false
        type: string
      dx_base_url:
        description: "DX base URL"
        required: false
        type: string
      need_to_register_deployment_to_dx:
        description: "Is it needed to register the deployment to DX"
        required: false
        default: false
        type: boolean
      environment:
        description: "Deployment Environment"
        required: false
        type: string
      dx_app_category:
        description: "DX app category"
        required: false
        type: string
    secrets:
      DX_API_TOKEN:
        description: "DX API Token"
        required: false

jobs:
  deploy-lambda:
    name:  üöÄ Deploy to Lambda
    runs-on:
      ${{ fromJSON(inputs.runner_label) }}
    steps:
    - name: ‚è≥ Checkout
      uses: actions/checkout@v4

    - name: üî© Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-skip-session-tagging: true
        role-to-assume: ${{ inputs.aws_iam_role_arn }}
        role-session-name: gh-actions
        aws-region: ${{ inputs.aws_account_region }}

    - name: Install Python for installing AWS CLI
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
      if: contains('platform-eng-ent-v2-dual', ${{ inputs.runner_label }})

    - name: Install AWS CLI
      run: |
        python -m pip install --upgrade pip
        pip install awscli
      if: contains('platform-eng-ent-v2-dual', ${{ inputs.runner_label }})

    - name: üõ†Ô∏è Build the Lambda
      working-directory: ${{ inputs.working_directory }}
      run: |
        bash ${GITHUB_WORKSPACE}/${{  inputs.build_script_path }}
      if: ${{ inputs.build_script_path !='' }}

    - name: üì¶ Package Lambda via zip
      working-directory: ${{ inputs.working_directory }}
      run: |
        aws lambda update-function-code --function-name ${{inputs.lambda_function_name}} --zip-file fileb://${{ inputs.local_build_path }} --architectures=${{ inputs.lambda_architecture}} --region ${{ inputs.aws_account_region}}
      if: ${{ inputs.local_build_path !=''  }}

    - name: üöÄ Deploy to Lambda via S3
      working-directory: ${{ inputs.working_directory }}
      run: |
        aws lambda update-function-code --function-name ${{ inputs.lambda_function_name }} \
                --s3-bucket=${{inputs.s3_bucket}} --s3-key=${{inputs.s3_key}} \
                --architectures=${{inputs.lambda_architecture}} --region=${{inputs.aws_account_region}}
      if: ${{ (inputs.s3_bucket !='') && (inputs.s3_key !='')  }}

    - name: üöÄ Deploy to Lambda with ECR Image
      working-directory: ${{ inputs.working_directory }}
      run: |
        aws lambda update-function-code --function-name ${{inputs.lambda_function_name}} --image-uri ${{ inputs.ecr_image_uri }}  --architectures=${{inputs.lambda_architecture}} --region ${{ inputs.aws_account_region}}
      if: ${{ inputs.ecr_image_uri !=''  }}

    - name: üîÑ Update Lambda Environment Variables
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      env:
        env_var: ${{ env.env_var }}
      run: |
        # LAMBDA_ENV_INPUT_VAR="${'${{ inputs.lambda_environment_var }}'//\"/\\\"}"
        # echo $LAMBDA_ENV_INPUT_VAR
        UPDATED_ENVIRONMNET_VARIABLES=$(aws lambda get-function-configuration --function-name ${{inputs.lambda_function_name}} | jq --compact-output ".Environment + {\"Variables\": (.Environment.Variables + {${{ inputs.lambda_environment_var }}})}")
        aws lambda update-function-configuration --function-name ${{ inputs.lambda_function_name }} \
        --environment ${UPDATED_ENVIRONMNET_VARIABLES}
      if: ${{ inputs.lambda_environment_var !='' }}

  register_deploy_dx:
    if: ${{ success() || failure() }} # ensures this job runs even on failure
    needs: [deploy-lambda]
    runs-on:
      - platform-eng-ent-v2-dual
    steps:
      - name: Register deployment
        uses: SPHTech-Platform/deploy-actions/register_deploy_dx@v2
        with:
          dx_base_url: ${{ inputs.dx_base_url }}
          dx_api_token: ${{ secrets.DX_API_TOKEN }}
          service: ${{ inputs.dx_service_name }}
          env: ${{ inputs.environment }}
          product_name: ${{ inputs.dx_product_name }}
          app_category: ${{ inputs.dx_app_category }}
        if: ${{ inputs.need_to_register_deployment_to_dx }}
