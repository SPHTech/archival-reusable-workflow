name: 'Deploy S3 Assets to the AWS S3 and invalidate the cache'

on:
  workflow_call:
    inputs:
      iam_role_arn:
        description: "aws iam role arn for ecr repository access"
        type: string
        required: true
      aws_account_region:
        description: "AWS account region"
        type: string
        required: false
        default: ap-southeast-1
      s3_frontend_bucket:
        description: "AWS S3 bucket for deploying the front "
        type: string
        required: true
      s3_admin_bucket:
        description: "AWS S3 bucket where the lambda zip file is stored"
        type: string
        required: false
        default: ""
      language:
        type: string
        description: "Frontend Language to build"
        required: true
      environmet_repository:
        type: string
        default: dev
        description: "Environment repository secrets"
        required: false
      s3_build_script:
        description: "Path to the build Script for building the project including arguments(if needed)"
        type: string
        required: true
      s3_deploy_script:
        description: "Path to the Deploy Script for deploying including arguments(if needed)"
        type: string
        required: true
      cloudfront_dist_frontend_invalidate:
        description: "Cloudfront Distribution ID for the frontend"
        type: string
        required: false
      cloudfront_path_frontend_invalidate:
        description: "Cloudfront Distribution path for front end to invalidate"
        default: "/"
        type: string
        required: false
      cloudfront_region_frontend_invalidate:
        description: "Cloudfront Distribution region for front end to invalidate"
        default: ap-southeast-1
        type: string
        required: false
      cloudfront_dist_admin_invalidate:
        description: "Cloudfront Distribution ID for the Admin"
        type: string
        required: false
      cloudfront_path_admin_invalidate:
        description: "Cloudfront Distribution path for admin to invalidate"
        default: "/"
        type: string
        required: false
      cloudfront_region_admin_invalidate:
        description: "Cloudfront Distribution region for Admin to invalidate"
        default: ap-southeast-1
        type: string
        required: false
      runner_label:
        description: "Add runners for the GHA"
        default: '["self-hosted","platform-eng-ent"]'
        type: string
        required: false
      dx_service_name:
        description: "Name of the service to register deployment to DX"
        required: false
        type: string
      dx_product_name:
        description: "Name of the product to register deployment to DX"
        required: false
        type: string
      dx_base_url:
        description: "DX base URL"
        required: false
        type: string
      need_to_register_deployment_to_dx:
        description: "Is it needed to register the deployment to DX"
        required: false
        default: false
        type: boolean
      environment:
        description: "Deployment Environment"
        required: false
        type: string
      dx_app_category:
        description: "DX app category"
        required: false
        type: string
    secrets:
      CLOUDFRONT_DISTRIBUTION_FRONTEND_ID:
        required: false
      CLOUDFRONT_DISTRIBUTION_ADMIN_ID:
        required: false
      DX_API_TOKEN:
        description: "DX API Token"
        required: false

jobs:
  deploy-to-s3:
    name: üöÄ Deploy to S3 and Invalidate Cloudfront Cache
    runs-on:
      ${{ fromJSON(inputs.runner_label) }}
    environment: ${{ inputs.environmet_repository }}
    permissions:
      contents: read
      id-token: write
    steps:
    - name: ‚è≥ Checkout
      uses: actions/checkout@v4

    - name: üî© Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-skip-session-tagging: true
        role-to-assume: ${{  inputs.iam_role_arn }}
        role-session-name: gh-actions
        aws-region: ${{ inputs.aws_account_region }}

    - name: üíæ Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 14
        check-latest: true
      if:  ${{ inputs.language == 'nodejs' }}

    - name: Install Python for installing AWS CLI
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
      if: contains('self-hosted', ${{ inputs.runner_label }})

    - name: Install AWS CLI
      run: |
        python -m pip install --upgrade pip
        pip install awscli
      if: contains('self-hosted', ${{ inputs.runner_label }})

    - name: üì• Install dependencies
      env:
        CI: false
      run: |
        bash ${GITHUB_WORKSPACE}/${{  inputs.s3_build_script }}

    - name: üöÄ Deploy to S3
      run: |
        bash ${GITHUB_WORKSPACE}/${{  inputs.s3_deploy_script }} ${{  inputs.s3_frontend_bucket }} ${{  inputs.s3_admin_bucket }}

    - name: üöÆÔ∏è Invalidate CloudFront cache for Frontend
      uses: chetan/invalidate-cloudfront-action@v2.4
      env:
        DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_FRONTEND_ID }}
        PATHS: ${{ inputs.cloudfront_path_frontend_invalidate }}
        AWS_REGION: ${{ inputs.cloudfront_region_frontend_invalidate }}
        DEBUG: 1
      if: ${{ env.DISTRIBUTION != '' }}
    - name: Invalidate CloudFront cache for Admin
      uses: chetan/invalidate-cloudfront-action@v2.4
      env:
        DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ADMIN_ID }}
        PATHS: ${{ inputs.cloudfront_path_admin_invalidate }}
        AWS_REGION: ${{ inputs.cloudfront_region_admin_invalidate }}
        DEBUG: 1
      if: ${{ env.DISTRIBUTION != '' }}

  register_deploy_dx:
    if: ${{ success() || failure() }} # ensures this job runs even on failure
    needs: [deploy-to-s3]
    runs-on:
      - self-hosted
      - platform-eng-ent
    steps:
      - name: Register deployment
        uses: SPHTech-Platform/deploy-actions/register_deploy_dx@v2
        with:
          dx_base_url: ${{ inputs.dx_base_url }}
          dx_api_token: ${{ secrets.DX_API_TOKEN }}
          service: ${{ inputs.dx_service_name }}
          env: ${{ inputs.environment }}
          product_name: ${{ inputs.dx_product_name }}
          app_category: ${{ inputs.dx_app_category }}
        if: ${{ inputs.need_to_register_deployment_to_dx }}
