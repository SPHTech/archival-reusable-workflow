name: 'Package and Deploy ECR'

on:
  workflow_call:
    inputs:
      iam_role_arn:
        description: "aws iam role arn for ecr repository access"
        type: string
        required: true
      aws_account_region:
        description: "AWS account region"
        type: string
        required: true
      ecr_repository:
        description: "ECR repository name"
        type: string
        required: true
      docker_no_cache:
        description: "Docker No cache on build"
        type: boolean
        required: false
        default: false
      context:
        description: "Source context - path location to docker build"
        type: string
        default: "."
        required: false
      file:
        description: "Path to the Dockerfile"
        type: string
        default: Dockerfile
        required: false
      tag_mutability:
        description: "ECR tag mutability"
        type: boolean
        default: true
        required: false
      build_args:
        description: "Multi-line string of build arguments for docker"
        type: string
        default: ""
        required: false
      provenance_attestation:
        description: "Generate provenance attestation for the build"
        type: boolean
        default: true
        required: false
      environment:
        type: string
        description: "The environment variable for the workflow"
        required: true
      runners:
        description: "Add runners for the GHA"
        default:
          - self-hosted
          - platform-eng-ent
        type: string
        required: false
    secrets:
      TOKEN:
        required: true
      NEWRELIC_PHP_LICENSE_KEY:
        required: true
    outputs:
      ecr_image_tag:
        description: "Output the image tag"
        value: ${{ jobs.publish-to-ecr.outputs.image_tag }}


jobs:
  publish-to-ecr:
    name: üõ†Ô∏è Build and Publish to ECR
    runs-on: ${{ inputs.runners }}
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      id-token: write
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.IMAGE_TAG }}
    steps:
    - name: ‚è≥ Checkout repository
      uses: actions/checkout@v4

    - name: üî© configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-skip-session-tagging: true
        role-to-assume: ${{ inputs.iam_role_arn }}
        role-session-name: gh-actions
        aws-region: ${{ inputs.aws_account_region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: üíæ Setup image tag
      id: set_image_tag
      run: |
        echo "IMAGE_TAG=${GITHUB_SHA::8}" >> "${GITHUB_ENV}"
        echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
      shell: bash

    - name: üíæ Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: üõ†Ô∏è Build and push Docker mutable image
      uses: docker/build-push-action@v5
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ inputs.ecr_repository }}
      with:
        context: ${{ inputs.context }}
        build-args: |
          ${{ inputs.build_args }}
          GITHUB_OAUTH_TOKEN=${{ secrets.TOKEN }}
          NEWRELIC_LICENSE_KEY=${{ secrets.NEWRELIC_PHP_LICENSE_KEY }}
        file: ${{ inputs.file }}
        no-cache: ${{ inputs.docker_no_cache }}
        push: true
        provenance: ${{ inputs.provenance_attestation }}
        tags: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}, ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest
      if: inputs.tag_mutability

    - name: üõ†Ô∏è Build and push Docker immutable image
      uses: docker/build-push-action@v5
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ inputs.ecr_repository }}
      with:
        context: ${{ inputs.context }}
        build-args: |
          ${{ inputs.build_args }}
          GITHUB_OAUTH_TOKEN=${{ secrets.TOKEN }}
          NEWRELIC_LICENSE_KEY=${{ secrets.NEWRELIC_PHP_LICENSE_KEY }}
        file: ${{ inputs.file }}
        no-cache: ${{ inputs.docker_no_cache }}
        push: true
        provenance: ${{ inputs.provenance_attestation }}
        tags: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
      if: inputs.tag_mutability != true
