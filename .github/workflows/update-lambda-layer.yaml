name: 'Update Lambda Layer'

on:
  workflow_call:
    inputs:
      aws_account_region:
        description: "AWS account region"
        type: string
        required: true
      aws_iam_role_arn:
        description: "AWS ARN IAM Role"
        type: string
        required: true
      layer_name:
        description: "Lambda layer function name"
        type: string
        required: true
      lambda_function_name:
        description: "Lambda function name to be deployed"
        type: string
        required: false
        default: ''
      lambda_function_names_to_update:
        description: "Lambda function names that needed to be updated with latest version(this is used when
        multiple lambdas need to be updated with common layers, 'Multi-line string')"
        type: string
        required: false
        default: ''
      lambda_layer_update_speciific_version:
         description: "Lambda layer version to update"
         type: string
         required: false
         default: ''


jobs:
  get-lambda-layer:
    name: Update Lambda Layers
    runs-on: ubuntu-latest
    steps:
    - name: ⏳ Checkout repository
      uses: actions/checkout@v4

    - name: 🔩 Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-skip-session-tagging: true
        role-to-assume: ${{ inputs.aws_iam_role_arn }}
        role-session-name: gh-actions
        aws-region: ${{ inputs.aws_account_region }}

    - name: 📥 Get the Latest Lambda Layer
      shell: bash
      run: |
        latestlambdalayerarn=$(aws lambda list-layer-versions --layer-name ${{ inputs.layer_name }} --region ${{ inputs.aws_account_region }} --query 'LayerVersions[0].LayerVersionArn')
        if [ -n "${{ inputs.lambda_layer_update_speciific_version }}" ]; then
          lambda_layer_part_name=$(echo "$latestlambdalayerarn" | cut -f -7  -d":")
          latestlambdalayerarn="${lambda_layer_part_name}:${{ inputs.lambda_layer_update_speciific_version }}"\"
        fi
        echo "latestlambdalayer=$latestlambdalayerarn" >> $GITHUB_ENV

    - name: 🔄 Update the Lambda Layer
      shell: bash
      env:
        latestlambdalayer: ${{ env.latestlambdalayer }}
      run: |
        echo ${{ env.latestlambdalayer }}
        modified_layer=${{ env.latestlambdalayer }}
        layer=''
        lambda_layers=$(aws lambda get-function --function-name ${{ inputs.lambda_function_name }} | jq .Configuration.Layers[]?.Arn)
        lambda_layers=$(sed -e 's/^"//' -e 's/"$//' <<<"$lambda_layers")
        B="$(cut -d':' -f7 <<<"$modified_layer")"
        B_no=${modified_layer##*:}
        if [ -n "$lambda_layers" ]; then
          for rec in $lambda_layers
          do
            A="$(cut -d':' -f7 <<<"$rec")"
            A_no=${rec##*:}
            if [[ $B == *"$A" && B_no -gt A_no ]]; then
              layer+=" $modified_layer "
            elif [[ $B == *"$A" && B_no -lt A_no ]]; then
              layer+=" $rec "
            elif [[ $layer != *"$B"* ]]; then
              layer+=" $modified_layer ${rec}"
            else
              layer+=" ${rec} "
            fi
          done
        else
          layer+=" ${modified_layer} "
        fi
        echo "Lambda Layers "
        layer_mod=$(echo $layer | sed 's/"//g')
        echo $layer_mod
        if [ -n "$layer_mod" ]; then
          layer_to_be_modified_layer=$(echo "$layer_mod" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}')
          echo "Layers to be modified : "$layer_to_be_modified_layer
          aws lambda update-function-configuration --function-name ${{ inputs.lambda_function_name }} --layers $layer_to_be_modified_layer
        fi
      if: ${{ (inputs.lambda_function_names_to_update =='') && (inputs.lambda_function_name !='') }}

    - name: 🔄 Update the common Lambda Layer to all the Lambdas
      shell: bash
      env:
        latestlambdalayer: ${{ env.latestlambdalayer }}
      run: |
        lambda_function_names="${{ inputs.lambda_function_names_to_update }}"
        lambda_layers_name="${{ inputs.layer_name }}"
        while IFS= read -r lambda ;do
          lambda=$(echo $lambda | xargs)
          echo $lambda
          if [ -n "$lambda"  ]; then
            lambda_layers=$(aws lambda get-function --function-name $lambda | jq .Configuration.Layers[]?.Arn)
            lambda_layers_arr=$(sed -e 's/^"//' -e 's/"$//' <<<"$lambda_layers")
            if [ -n "$lambda_layers" ]; then
                modified_layers=''
                count=0
                for rec in $lambda_layers_arr
                do
                  if [[ "$rec" == *"$lambda_layers_name"* ]]; then
                    modified_layers+="${{ env.latestlambdalayer }} "
                    ((count=count+1))
                  else
                    modified_layers+="$rec "
                  fi
                done
                if [ $count == 0 ]; then
                  modified_layers+="${{ env.latestlambdalayer }} "
                fi
            else
              modified_layers=${{ env.latestlambdalayer }}
            fi
            modified_layers=$(echo $modified_layers | sed 's/"//g')
            echo "Layers to be modified : "$modified_layers
            if [ -n "$modified_layers" ]; then
              echo "Lambdas : "$lambda
              aws lambda update-function-configuration --function-name $lambda --layers $modified_layers
            fi
          fi
        done <<< "$lambda_function_names"
      if: ${{ (inputs.lambda_function_names_to_update !='') && (inputs.lambda_function_name =='') }}
