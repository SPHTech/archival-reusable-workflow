name: 'Update Lambda Layer'

on:
  workflow_call:
    inputs:
      aws_account_region:
        description: "AWS account region"
        type: string
        required: true
      aws_iam_role_arn:
        description: "AWS ARN IAM Role"
        type: string
        required: true
      layer_name:
        description: "Lambda layer function name"
        type: string
        required: true
      lambda_function_name:
        description: "Lambda function name to be deployed"
        type: string
        required: true


jobs:
  get-lambda-layer:
    name: Update Lambda Layers
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-skip-session-tagging: true
        role-to-assume: ${{ inputs.aws_iam_role_arn }}
        role-session-name: gh-actions
        aws-region: ${{ inputs.aws_account_region }}

    - name: Get the Latest Lambda Layer
      shell: bash
      run: |
        latestlambdalayerarn=$(aws lambda list-layer-versions --layer-name ${{ inputs.layer_name }} --region ${{ inputs.aws_account_region }} --query 'LayerVersions[0].LayerVersionArn')
        echo "latestlambdalayer=$latestlambdalayerarn" >> $GITHUB_ENV

    - name: Update the Lambda Layer
      shell: bash
      env:
        latestlambdalayer: ${{ env.latestlambdalayer }}
      run: |
        echo ${{ env.latestlambdalayer }}
        modified_layer=${{ env.latestlambdalayer }}
        layer=''
        lambda_layers=$(aws lambda get-function --function-name ${{ inputs.lambda_function_name }} | jq .Configuration.Layers[]?.Arn)
        lambda_layers=$(sed -e 's/^"//' -e 's/"$//' <<<"$lambda_layers")
        B="$(cut -d':' -f7 <<<"$modified_layer")"
        B_no=${modified_layer##*:}
        if [ -n "$lambda_layers" ]; then
          for rec in $lambda_layers
          do
            A="$(cut -d':' -f7 <<<"$rec")"
            A_no=${rec##*:}
            if [[ $B == *"$A" && B_no -gt A_no ]]; then
              layer+=" $modified_layer "
            elif [[ $B == *"$A" && B_no -lt A_no ]]; then
              layer+=" $rec "
            elif [[ $layer != *"$B"* ]]; then
              layer+=" $modified_layer ${rec}"
            else
              layer+=" ${rec} "
            fi
          done
        else
          layer+=" ${modified_layer} "
        fi
        layer_mod=$(echo $layer | sed 's/"//g')   | xargs -n1 | sort -u | xargs
        echo $layer_mod
        aws lambda update-function-configuration --function-name ${{ inputs.lambda_function_name }} --layers $layer_mod
